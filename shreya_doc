this file is here for documentation.
I will write a lot here so sit back enjoy popcorn and read this while you are here with this dox.
i will be writing this very informally. why? coz I want to. For this project at least.

30-07-25:
so what happened is once we make a new react app for this we run
npx create-expo-app@latest trip-planner
the next thing happened is i can see the dependencies loading but they were shown deprecated so the ts version is old...it has to be above 5.0 for this to be fixed...

now what?
we remove these files, 
get that version now again run the same npx command and see those dependencies loading,
now if you see any thing like red folder and it ways some expo folder is not found in tsconfig.json then
nothing to worry just close vs code and open it again.
why? coz it takes time for vs to digest this new version of ts you just loaded a min ago..
yah we will reopen it and this time everything will be in place.

03-08-25
well here we are..
i am figuring out a way to skip doing the splash screen ( basically leave it for my teammate to take on). still i need to create this button to jump to login page that i need to design.
yah a random issue i face which led me to stay stuck for hr. (literally idiotic reasonon). the expo on my phone was not working.i literally donwloaded that latest cli version again... good to know we don't have to mess with the setup in the mean time.
The common sense is that if a code worked a week ago then what can potentially coz "something went wrong issue" 
when i saw the log it say java.io.expection in expo when i seached further after loading the cli and deleting it and again loading it. well tirinig..right

so yah the issue was that when you are running expo kindly connect your laptop and phone to same network ot hosts the prototype on LAN and i was running my laptop using university network and phone with my own net.

so to fix this grand issue that sounds so big i simply need to connect my phone to college wifi...people who always use only one network will not run into this kind of issue often.

yah back to the splash screen.
so i made a button on the same page i made before.
used const router=useRouter() and then you can use OnPress()=>router.push()
and router.replace()
to switch the page when you that touchableOpacity option.
let me elaborate..

so react native is like html and css with js in the middle some time..for making things functional.

html type tags you will find view instead of sections .
you can add style to this view you can ahve text inside this view and then may be add style to that you can add in line style like 
<!-- <View style={{border:1,color:white}}>
<Text style={{color:blue, fontFamily:'outfit'}}> -->
or you can hace style sheet and use the tag names to apply styles
<!-- const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#d1f1fbff',
  })} -->

  which you can tell seperately and then again you can use 
   <!-- <View style={styles.container}><Text>Get Started</Text></View> -->
simply use styles dot name_of_style, using all this you can design a page.

all this will make the layout now what about clicks .
you need to change view to touchableOpacity to make the onPress event work for redirecting user to the next page...
<!-- <TouchableOpacity onPress()=>router.push('path_to_the_next_page')></TouchableOpacity> --> 
so we have two of them we have 
router.push("path") and router.replace("path")
push keep the history of page visited so if you press back you will to the previsous page in stack where as if you press replace thne you will be redirected to the next page without history.
so if you press back you won't go back to previous page you will start from the very inital page so yah...

what else is, it is preferred to use colors with variable name.
so in constant you get this Colors.ts as a part of boiler plate code.
it does not exists simply for us to ignore.
every time you are using a color has a pallet that you can use and reuse 
in this color.ts define it in primary section and then use dot operator to access it by name to make things simple...

in the near future if you ever stuble on this app and you feel like changing the style then you can use this to try out differnt pallet without having to worry about changing the same color everywhere.
get into the habit of using it.

and yes to use it correctly you need to import it correctly like this
import { Colors } from './../../../constants/Colors';
so yah you can mess up and don't do it to a degree that it cannot be reverted back
...or you can even do that as long as you can recreate the whole thing again.
<!-- :)  -->

we can use things like TextInput which is self closing to make text areas.
then we can put some box using  placeholder="enter your email".
if you want it to be a password entry then use secureTextEntry={true}
that will convert your letters to dots while you enter the password...cool right...

Alright all this is my understanding of react native so far.
i wonder if any one would read it.
if someone does then i hope it helps them to fix minor bugs along the way.

Result: i completed the layout for the sign-in page.
signing off for today.

10/08/25
working on authentication
firebase offers a range of sign in and sign up options. we can use google , face book , and other accounts to sign in. 

i creatd a project in firebase named ai- trip planner by selecting the web.
 then in once it is created we need to use "npm install fibase"
  to install libararies we will be useing then we simply copy the code segment provided for establising connection with the fire base and put it in the configs/ FirebaseConfig.js file to make sure it can be used.

  then we add 
export const app = initializeApp(firebaseConfig);
export const auth = getAuth(app);

we use export to make sure we can use this througth out the application ...now you will run into an issue sayint that getAuth is not improted ..
in that case in the same configuration file you need to import...file using 
import { getAuth } from "firebase/auth";

this will fix it.
now we go to firebsae documentation..to find sign up and sign in section code and try to put that in a functioon and import the necessary sections as mentioned in the code snippit 
first i am doing sign up section for that i got
====================================================
createUserWithEmailAndPassword(auth, email, password)
  .then((userCredential) => {
    // Signed up 
    const user = userCredential.user;
    console.log('User created:', user);
    // ...
  })
  .catch((error) => {
    const errorCode = error.code;
    const errorMessage = error.message;
    // ..
    console.error('Error creating user:', errorCode, errorMessage);
  });
  ======================================================
  put this in a const funtion like
  const OnCreateAccount=()=>
  {
    //here
  }

  we can print some console msg just to be sure that thigs work well.
  it basically logs the errors.

in firebase ...after making the project we simply need to select the authentication option i choose email/ password then enabled it on the other page.

now in order to connect the function OnCreateAccount(), we can create const here the email is the variable and setEmail works like getter/ setter so we can either import useState from react by 
import {useState} from 'React' 
then..

const [email, setEmail] = useState();
const [password, setPassword] = useState();
  
or
we can also use 
React.useState()
as const [email, setEmail] = React.useState();

we also need to import 
import {createUserWithEmailAndPassword } from 'firebase/auth';
import {auth} from './../../../configs/FirebaseConfig';
these will give us access to the auth we exported from the FirebaseConfig file earlier

in order to get access to the values entere in the input box we have a method on change... 
OnChange={(value)}=>console.log("to see what we see")
if we type somehting we will see that on the console which shows it is getting access to the data being entered.

SUPER COOOOOL Stuff....
we can print write any thing to make text mountain of text and emoji...

so we used 
onChangeText={(value) => setEmail(value)} 
this to set email password, full name and all for entry the code section checks if the data matches the fire base data
we can use 
 ToastAndroid.show('Please enter a valid email address.', ToastAndroid.LONG);
 to show msg to user for entering right email or show msg in case input field in empty 
 this shows clean msg in case of invalid input
 so yah authentication is done from my end.
 now we will start from the files in (tabs) section
 it has files as 
 layout, discover, mytrip, profile that will be completed in the next update.
 the index that is below the tabs folder is there to for redirection from login to home page and even check if the user is already logged in
 then there is _layout it is there for encapulated design, where tabs are stacked over one another,
 we will continue... to move forward.
  

 11-08-25
 the unavoidable happened ..
 i was about to use google api for search then it asked for billing so i looked for alternate that lets you use it without billing as long as the request is 1 per sec...so i added a time out for 1000ms to be safe...if something goes wrong it will not work...and even not respond to me temporarily ..anyway 

 13-8-25
 so yah i got stuck on adding a callender for some reason the expo calender was not supporting. and i did not expect that may version of the callender exist to i used the alternate took ages to seach for the right one that did the job, and now we can do select tarvel dates in range... 
 


